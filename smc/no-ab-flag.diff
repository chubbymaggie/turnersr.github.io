diff -r 602c37af37b5 AbGoto.v
--- a/AbGoto.v	Wed Jan 29 18:51:27 2014 +0100
+++ b/AbGoto.v	Thu Jan 30 10:27:13 2014 +0100
@@ -172,8 +172,8 @@
 Qed.
 
 Record ab_machine_config :=
-{ ab_flg: (register * register)+⊤
-; ab_reg: Map [ register , d ]
+{
+  ab_reg: Map [ register , d ]
 ; ab_mem: Map [ int, d ]
 }.
 
@@ -198,20 +198,6 @@
 
 Definition ab_machine_state : Type := (ab_machine_config + d)%type.
 
-Definition flag_LE (x y: (register * register)+⊤) : Prop :=
-  match x, y with
-  | _, All => True
-  | All, Just _ => False
-  | Just x', Just y' => x' = y'
-  end.
-
-Definition flag_LE_dec x y : { flag_LE x y } + { ¬ flag_LE x y } :=
-  match x, y with
-  | _, All => left I
-  | All, _ => right (λ x, x)
-  | Just x', Just y' => eq_dec x' y'
-  end.
-
 (* This is an ordering for maps in which keys are implicitely bound to bottom *)
 Definition map_LE {A B: Type} `{OrderedType A} (leb : B → B → bool) (x y: Map [ A, B ]) : Prop :=
   ∀ a b, MapsTo a b x → ∃ b', MapsTo a b' y ∧ leb b b' = true.
@@ -284,21 +270,16 @@
 Defined.
 
 Definition abmc_LE (x y: ab_machine_config) : Prop :=
-  flag_LE x.(ab_flg) y.(ab_flg)
-∧ wmap_LE x.(ab_reg) y.(ab_reg)
-∧ wmap_LE x.(ab_mem) y.(ab_mem).
+  wmap_LE x.(ab_reg) y.(ab_reg) ∧
+  wmap_LE x.(ab_mem) y.(ab_mem).
 
 Definition abmc_LE_dec x y : { abmc_LE x y } + { ¬ abmc_LE x y } :=
-  match flag_LE_dec x.(ab_flg) y.(ab_flg) with
+    match wmap_LE_dec x.(ab_reg) y.(ab_reg) with
   | right NE => right (λ K, NE (proj1 K))
-  | left F =>
-    match wmap_LE_dec x.(ab_reg) y.(ab_reg) with
-  | right NE => right (λ K, NE (proj1 (proj2 K)))
   | left R =>
     match wmap_LE_dec x.(ab_mem) y.(ab_mem) with
-  | right NE => right (λ K, NE (proj2 (proj2 K)))
-  | left MEM => left (conj F (conj R MEM))
-    end
+  | right NE => right (λ K, NE (proj2 K))
+  | left MEM => left (conj R MEM)
     end
   end.
 
@@ -318,10 +299,6 @@
 Defined.
 
 (* Join *)
-Definition flg_join x y :=
-  if flag_LE_dec x y
-  then y
-  else All.
 
 Definition map_join {A B: Type} `{OrderedType A} (join: B → B → B) (f g: Map [ A, B ]) : Map [ A, B ] :=
   fold
@@ -384,13 +361,11 @@
 Qed.
 
 Definition abmc_join (x y: ab_machine_config) : ab_machine_config :=
-  {| ab_flg := flg_join x.(ab_flg) y.(ab_flg)
-   ; ab_reg := wmap_join join x.(ab_reg) y.(ab_reg)
+  {| ab_reg := wmap_join join x.(ab_reg) y.(ab_reg)
    ; ab_mem := wmap_join join x.(ab_mem) y.(ab_mem) |}.
 
 Definition abmc_widen (x y: ab_machine_config) : ab_machine_config :=
-  {| ab_flg := flg_join x.(ab_flg) y.(ab_flg)
-   ; ab_reg := wmap_join widen x.(ab_reg) y.(ab_reg)
+  {| ab_reg := wmap_join widen x.(ab_reg) y.(ab_reg)
    ; ab_mem := wmap_join widen x.(ab_mem) y.(ab_mem) |}.
 
 Definition abms_join (x y: ab_machine_state) : ab_machine_state+⊤ :=
@@ -401,11 +376,6 @@
   end.
 
 (* Gamma *)
-Definition flg_gamma (x: (register * register)+⊤) (mci: machine_config) : Prop :=
-  match x with
-  | Just (r1, r2) => ∀ f, mci.(mc_flg) f = eval_flag (mci.(mc_reg) r2) (mci.(mc_reg) r1) f
-  | All => True
-  end.
 
 Definition map_gamma {A B C: Type} `{OrderedType A} `{weak_lattice B} `{gamma_op B C} (x: Map [ A, B ]) (v: A → C): Prop :=
   ∀ k, γ (find_bot x k) (v k).
@@ -470,8 +440,7 @@
 Qed.
 
 Definition abmc_gamma (x: ab_machine_config) (mc: machine_config) : Prop :=
-    flg_gamma x.(ab_flg) mc
-  ∧ wmap_gamma x.(ab_reg) mc.(mc_reg)
+    wmap_gamma x.(ab_reg) mc.(mc_reg)
   ∧ gamma_mem x.(ab_mem) mc.(mc_mem).
 
 Definition abms_gamma (x: ab_machine_state) (m: machine_state) : Prop :=
@@ -493,10 +462,6 @@
 Instance abmc_toString `{ToString d} : ToString ab_machine_config :=
   { to_string x :=
   ("⟨" ++
-    match x.(ab_flg) with
-    | All => ""
-    | Just (r1,r2) => "(" ++ string_of_reg r1 ++ ", " ++ string_of_reg r2 ++ ")"
-    end ++
     map_to_string string_of_reg to_string x.(ab_reg) ++
     map_to_string string_of_int to_string x.(ab_mem) ++
     "⟩"
@@ -517,15 +482,11 @@
   intros x y. simpl.
   destruct abmc_LE_dec as [LE|]. 2: intro; exfalso; discriminate.
   intros _ mci.
-  destruct x as [xf xr xm];
-  destruct y as [yf yr ym].
-  destruct LE as (LEf & LEr & LEm).
-  intros (f & r & m). simpl in *.
+  destruct x as [xr xm];
+  destruct y as [yr ym].
+  destruct LE as (LEr & LEm).
+  intros (r & m). simpl in *.
   split; simpl.
-  destruct xf as [|(xf1,xf2)]; destruct yf as [|(yf1,yf2)]; auto.
-  exact (False_ind _ LEf).
-  simpl in *. intuition congruence.
-  split.
   intros k. generalize (LEr k). unfold find_def.
   destruct ((yr)[k]); auto.
   generalize (r k). unfold find_def. destruct ((xr)[k]); intros u [v|(K&K')]; try (exfalso; discriminate); auto; eapply gamma_monotone; eauto.
@@ -542,11 +503,8 @@
   intros x y; simpl.
   unfold γ, abmc_gamma. simpl.
   intros mci H.
-  destruct x as [xf xr xm];
-  destruct y as [yf yr ym]; simpl in *.
-  split.
-  destruct xf as [|(xf1,xf2)]; destruct yf as [|(yf1,yf2)]; simpl; auto.
-  unfold flg_join. destruct flag_LE_dec; simpl in *. intuition. congruence. exact I.
+  destruct x as [xr xm];
+  destruct y as [yr ym]; simpl in *.
   split.
   apply (wmap_join_sound (AD := as_int_adom)). intros u v K. rewrite (register_eq_eq K). auto.
   intuition.
@@ -592,45 +550,17 @@
                    | Just x' => find_aloc x'.(ab_mem)
                    | _ => fun _ => top
                    end
-; compare x := match x with
-               | Just x' => fun r1 r2 => Just {| ab_flg := Just (r1, r2)
-                                               ; ab_reg := x'.(ab_reg)
-                                               ; ab_mem := x'.(ab_mem) |}
-               | _ => fun _ _ => x
-               end
-; assume x := match x with
-              | Just x' =>
-                fun f =>
-                  match x'.(ab_flg) with
-                  | Just (Ru, Rv) =>
-                    fun b =>
-                      let u := find_def x'.(ab_reg) Ru in
-                      let v := find_def x'.(ab_reg) Rv in
-                      let op := match f with FLE => Cle | FLT => Clt | FEQ => Ceq end in
-                      let v'u' := backward_int_binop (OpCmp op) v u
-                                                 (const_int (IntervalDomain.Interval.of_bool b)) in
-                      match v'u' with
-                      | (NotBot v', NotBot u') =>
-                        NotBot (Just {| ab_flg := x'.(ab_flg)
-                                      ; ab_reg := (x'.(ab_reg)) [ Ru <- u' ] [ Rv <- v' ]
-                                      ; ab_mem := x'.(ab_mem) |})
-                      | _ => Bot
-                      end
-                  | All => fun _ => NotBot x
-                end
-              | All => fun _ _ => NotBot All
-              end
+; compare x rs rd := x
+; assume x f b := NotBot x
 ; assign x := match x with
-              | Just x' => fun r v => Just {| ab_flg := invalidate_flag r x'.(ab_flg)
-                                            ; ab_reg := (x'.(ab_reg)) [ r <- v ]
+              | Just x' => fun r v => Just {| ab_reg := (x'.(ab_reg)) [ r <- v ]
                                             ; ab_mem := x'.(ab_mem) |}
               | _ => fun _ _ => All
               end
 ; store_single x a v := do_top x' <- x; 
-                        Just {| ab_flg := x'.(ab_flg)
-                              ; ab_reg := x'.(ab_reg)
+                        Just {| ab_reg := x'.(ab_reg)
                               ; ab_mem := ab_store_strong x'.(ab_mem) a v |}
-; init m dom := Just {| ab_flg := All; ab_reg := []; ab_mem := abmc_init m dom |}
+; init m dom := Just {| ab_reg := []; ab_mem := abmc_init m dom |}
 |}.
 
 Lemma ab_machine_config_mem_dom_sound : mem_dom_sound ab_machine_config_mem_dom (toplift_gamma abmc_gamma).
@@ -646,23 +576,17 @@
   apply H.
 - (* assign *)
   intros [|m'] rd v a (m & v' & H & K & L & M & N). auto.
-  destruct H as (HF & HR & HM).
-  split; simpl.
-  unfold invalidate_flag. destruct m'.(ab_flg) as [|(r1,r2)]. auto.
-  destruct @eq_dec. exact I.
-  destruct @eq_dec. exact I.
-  simpl. simpl in HF. intros f. rewrite L, M.
-  repeat rewrite upd_o; auto.
-  rewrite M, N. clear M N.
-  split; auto.
+  destruct H as (HR & HM).
+  split; simpl. rewrite M.
   intros r. unfold find_def.
   unfold upd. destruct @eq_dec. subst. rewrite MF.add_eq_o; auto.
   rewrite MF.add_neq_o. apply HR. apply register_neq_neq. intuition.
+  rewrite N. auto.
 - (* store *)
   intros [|ab] dst v mc H. exact I.
-  destruct H as (m & v' & (HF & HR & HM) & V & M).
+  destruct H as (m & v' & (HR & HM) & V & M).
   simpl in *.
-  split. exact HF. split. exact HR.
+  split. exact HR.
   intros k. simpl. unfold ab_store_strong.
   rewrite M.
   unfold find_aloc.
@@ -682,36 +606,15 @@
 - (* compare *)
   intros [|m']. easy.
   intros rs rd a (f & H & U).
-  split; simpl. congruence.
   split; apply H.
 - (* assume *)
-  intros [|[[|(f1,f2)] r' m']]; try easy;
-  intros f b a (A&B). auto.
-  destruct A as (HF&HR&HM). simpl in *.
-  match goal with |- context[ backward_int_binop ?o ?x ?y ?z ] =>
-                  generalize (backward_int_binop_sound o x y z)
-  end.
-  destruct backward_int_binop as (x',y').
-  intros H. destruct (H (mc_reg a f2) (mc_reg a f1)) as (Hx,Hy); auto.
-  specialize (HF f). rewrite B in HF. rewrite HF.
-  destruct f; apply const_int_correct.
-  destruct x'. exact Hx.
-  destruct y'. exact Hy.
-  split; simpl. auto. split; auto.
-  intros k. unfold find_def.
-  destruct (OrderedType.eq_dec f2 k) as [U|U].
-  rewrite MF.add_eq_o; auto. rewrite <- (register_eq_eq U). auto.
-  rewrite MF.add_neq_o; auto.
-  destruct (OrderedType.eq_dec f1 k) as [V|V].
-  rewrite MF.add_eq_o; auto. rewrite <- (register_eq_eq V). auto.
-  rewrite MF.add_neq_o; auto.
-  apply HR.
+  intros ab f b a (A&B). auto.
 - (* Flow insensitive *)
   intros [|x] m H pp. auto. apply H.
 - (* init *)
   intros m [pp0 m0 r f] dom. simpl.
   intros (->, I).
-  split. easy. split. simpl. intros k. unfold wmap_gamma, find_def. apply gamma_top; auto.
+  split. simpl. intros k. unfold wmap_gamma, find_def. apply gamma_top; auto.
   simpl. unfold abmc_init, gamma_mem.
   induction dom as [|x dom IH] using rev_ind;
   intros k.
