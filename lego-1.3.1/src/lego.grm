(* Pretty Lego grammar *
 * $Log: lego.grm,v $
 * Revision 1.21  1998/11/10 15:27:44  ctm
 * Label and Generate have (! tag !) syntax, as do terms
 *
 * Revision 1.20  1998/10/30 14:10:56  ctm
 * conditional visibility added, eg [A?Type][a?A]a
 *                         becoming [A|Type][a:A]a
 * when translated to abstract syntax
 *
 * Revision 1.19  1998/10/28 15:59:00  ctm
 * Attempt to fix reduction pattern grammar.
 *
 * Revision 1.18  1998/07/07 16:04:16  tms
 * fixed Cd bug under Linux
 *   LEGO no longer complains of uncaught exception NotDirectory if cd
 *   has been successful
 *
 * Revision 1.17  1998/06/03 11:59:24  ctm
 * This is the release source for LEGO 1.3
 *
 * Revision 1.16  1997/11/24 11:01:09  tms
 * merged immed-may-fail with main branch
 *
 * Revision 1.15.2.2  1997/10/14 19:31:50  djs
 * Support for error trapping in module imports.
 *
 * Revision 1.15.2.1  1997/10/10 17:02:19  djs
 * Made everything work on Solaris, by taking out some nested comments.
 *
 * Revision 1.15  1997/07/11 13:27:27  tms
 * Qrepl will fail if the LHS does not occur in the goal
 *
 * Revision 1.14  1997/06/20 14:51:25  djs
 * More changes to facilitate script management. Mostly to do with the
 * protocol for annotations, but also changed the behaviour of lego wrt
 * multiple declarations - now, if one fails, the others are rolled back.
 *
 * Revision 1.13  1997/05/28 10:34:32  tms
 * Tactic Assumption accepts relative goals
 *
 * Revision 1.12  1997/05/08 13:50:24  tms
 * o Added Support for Extending Tactics
 * o Generalised Expansion Commands to work relative to a path
 *
 * Revision 1.11  1997/03/06 09:52:11  tms
 * modified signature of pbptop
 * *)

    (******* User declarations ************)

type 'a binder =
	 bindSort * visSort * frzLocGlob * string list * string list * 'a
type 'a ctxt = 'a binder list

val UnfGlb = (UnFroz,Global)
val UnfLoc = (UnFroz,Local)
val FrzGlb = (Froz,Global)

fun ParserError s = Pos.errmsg "Lego parser" (s,(!Pos.lno),(!Pos.lno))
               (* will be ignored                           ^^^^^^^^ *)

fun defnerror() = ParserError "only identifiers can be bound"

%%  (******* ML-Yacc definitions **********)

%arg (filNamTimKndExec as (_,_,DepChecking)) 
   : ((string * time) * Modules.LoadKind * bool)

%header
(functor LegoLrValsFun (structure Token : TOKEN
                        structure Pos : POS
			structure Error : ERROR
			structure Modules : MODULES
			structure Top : TOP
			structure Synt : SYNT
			structure Tactics : TACTICS
			structure Tacticals : TACTICALS
			structure Toplevel : TOPLEVEL
			structure Discharge : DISCHARGE
			structure Init : INIT
			structure Infix : INFIX
    			structure ConorTop : CONORTOP
    			structure ConorThen : CONORTHEN
                        structure Quartermaster : QUARTERMASTER
			sharing type Synt.cnstr_c = cnstr_c and
				type Toplevel.cnstr_c = cnstr_c and
				type Tactics.cnstr_c = cnstr_c and
				type Top.cnstr_c = cnstr_c and
				type Discharge.cnstr_c=cnstr_c and
				type ConorTop.cnstr_c=cnstr_c and
                                type Quartermaster.cnstr_c=cnstr_c
                       ) : Lego_LRVALS)

(* %verbose *)

%name  Lego
%pos   Pos.pos

%term
ALLE | ALLI | ANDE | ANDI | ARROW | ANNOTATEON | ANNOTATEOFF  |
ASSUMPTION | BACKSLASH |
BAR | 
CD | CLAIM | COLON | CONFIG | CONTRACT | COMMA | CTXT | CHOICE | CUT |
CASE |
DEQ | DOLLARSQ | DISCHARGE | DISCHARGEKEEP | DNF | DOT | DOT1 |
   DOT2 | DECLS | DOUBLE |
ECHO | ELIM | EOF | EQUAL | EQUIV | EXE | EXI | EXPALL | EXPAND | EXPORTST |
ENDCASE |
FIELDS | FREEZE | FORGET | FORGETMARK | FROM |
GENERATE | GEN | GOAL | DOLLARGOAL |
HASH | HELP | HNF |
ID of string | INCLUDE | IMMED | IMPE | IMPI | INIT | INT of int |
   INTROS | iNTROS | IMPORT | INTERACTIVE |
INFIX | INFIX_UNREGD of string |
INFIX_L1 of string | INFIX_R1 of string | 
INFIX_L2 of string | INFIX_R2 of string | 
INFIX_L3 of string | INFIX_R3 of string | 
INFIX_L4 of string | INFIX_R4 of string | 
INFIX_L5 of string | INFIX_R5 of string | 
INFIX_L6 of string | INFIX_R6 of string | 
INFIX_L7 of string | INFIX_R7 of string | 
INFIX_L8 of string | INFIX_R8 of string | 
INFIX_L9 of string | INFIX_R9 of string | 
KILLREF |
LABEL | LOGIC | LCBR | LINE | LPTBR | LRBR | LSQBR | LOAD | LEFT |
MODULE |  MARKS | MAKE |
NEXT | NORMAL | NORMTYP | NOTE | NOTI |
ORE | ORIL | ORIR |
PPOFF | PPON | PPLINEWIDTH |
PRF | PRINTTIMER | PROP | PWD | PCTPCT | PBP | PBPHYP |
QM | QREPL |
RCBR | REFINE | RELINT of bool*int | RPTBR | RRBR | RSQBR | RELOAD | RIGHT |
SAVE | SAVEUNFROZ | SAVEFROZEN | DOLLARSAVE |
SAVEOBJECTSON | SAVEOBJECTSOFF |
  SEMICOLON | SLASHS | STARTTIMER | STRING of string | STARSQ |
TACTICELSE | TACTICFAIL | TACTICFOR | TACTICREPEAT | TACTICSUCCEED
 | TACTICTHEN | TACTICTRY | STTHEORY | ENDTHEORY |
THRY | TILDE | TREG | TYPE | TYPEOF | TYPESTR | TAGBEGIN | TAGEND |
UNDERSCORE | UNFREEZE | UNDO | UNSAFE |
INDUCTIVE | NOREDS | PARAMS | CONSTRS | RELATION | THEOREMS | RECORD |
INDUCTION | INVERSION | INVERT | QNIFY | qNIFY | EQUALITY |
UPARR | UTAC |
VREG 

| app (* For binding precedence over infix *)

%nonterm 
ANONID of string | APPLN of cnstr_c | ASSOC of Infix.Associativity |
BIND of cnstr_c binder | CAST of
cnstr_c | CMD of unit->unit | CNSTR of cnstr_c | 
CTXTT of cnstr_c ctxt | CTXTTE of cnstr_c ctxt |
CTXTL of cnstr_c ctxt | CTXTLE of cnstr_c ctxt | CUTDFN of (string*cnstr_c) |
CUTCXT of (string*cnstr_c)list | DECL of cnstr_c binder |
DEFN of cnstr_c binder | DEQS of unit |
DLBIND of (visSort * (string list) * cnstr_c) | DLSLBIND of ((visSort
* (string list) * cnstr_c) * (string list)) | DNBIND of (visSort *
(string list) * cnstr_c) | DNSLBIND of ((visSort * (string list) *
cnstr_c) * (string list)) | EXPRSN of unit->unit |  IDLIST of string
list | IDLST of string list | INTROST of string list |
INDOPT of Top.ind_options | RECOPT of Top.ind_options | 
SHAREDOPT of   Top.ind_options |
RELGOAL of unit -> int | 
REDUCTION of cnstr_c | RED of cnstr_c*cnstr_c |
      REDS of (cnstr_c*cnstr_c) list |
SPAT of cnstr_c | PAT of cnstr_c | PPAT of cnstr_c |
CASEEXP of cnstr_c | BRANCH of (cnstr_c ctxt)*cnstr_c*cnstr_c |
      BRANCHES of ((cnstr_c ctxt)*cnstr_c*cnstr_c) list | 
NUMCMD of unit->unit | NUMCMD0 of (int -> unit) | 
NUMCMD1 of (int -> cnstr_c -> unit) | 
START | STRINGorID of string | SorI_LST of string list | SORT of cnstr_c |
TACTICAL of unit->unit |SIMPLETACTICAL of unit->unit |
MODULEHEADER of string * string list |
COMBINEDTACTICAL of unit->unit |
TPL_BOD of (cnstr_c list) | TUPLE of ((cnstr_c list) * cnstr_c) |
INTLIST of (int list) |
LABELTAG of (string list) | MAGICTAG of (cnstr_c list)

%start   START
%eop     EOF SEMICOLON
%noshift EOF SEMICOLON

%nonassoc TACTICFOR TACTICREPEAT
%right TACTICELSE
%right TACTICTHEN 
%nonassoc TACTICTRY

%left INFIX_L1
%right INFIX_R1
%left INFIX_L2
%right INFIX_R2
%left INFIX_L3
%right INFIX_R3
%left INFIX_L4
%right INFIX_R4
%left INFIX_L5
%right INFIX_R5
%left INFIX_L6
%right INFIX_R6
%left INFIX_L7
%right INFIX_R7
%left INFIX_L8
%right INFIX_R8
%left INFIX_L9
%right INFIX_R9

%left app

%nonassoc COLON
%right ARROW HASH BACKSLASH COMMA
%left DOT DOT1 DOT2 UPARR

%nonassoc TILDE
  
%%
  START : MODULEHEADER ( (if DepChecking 
                            then Modules.DepCheck
                            else Modules.ModuleImport 
                            ) (filNamTimKndExec) MODULEHEADER )
                             
        | TACTICAL    ( if DepChecking then () else TACTICAL () )


  MODULEHEADER : MODULE ID                        (ID, [])
               | MODULE ID IMPORT SorI_LST        (ID, SorI_LST)

  TACTICAL : SIMPLETACTICAL         ( SIMPLETACTICAL )
           | COMBINEDTACTICAL       ( COMBINEDTACTICAL )
           |                        ( fn a => a )

  SIMPLETACTICAL : EXPRSN           ( EXPRSN )
                 | TACTICFAIL       ( Tacticals.tactical_fail )
                 | TACTICSUCCEED    ( Tacticals.tactical_succeed )

  COMBINEDTACTICAL :
    LRBR COMBINEDTACTICAL RRBR   ( COMBINEDTACTICAL ) 
  | TACTICAL TACTICTHEN TACTICAL ( ConorThen.Then TACTICAL1 TACTICAL2 )
  | TACTICAL TACTICELSE TACTICAL ( Tacticals.tactical_else TACTICAL1 TACTICAL2 )
  | TACTICREPEAT TACTICAL        ( Tacticals.tactical_repeat TACTICAL )
  | TACTICFOR INT TACTICAL       ( Tacticals.tactical_for INT TACTICAL )
  | TACTICTRY TACTICAL           ( Tacticals.tactical_try TACTICAL )  
 
  EXPRSN : CTXTT                     ( fn _ => Top.EvalCxt CTXTT ) 
         | CAST                      ( fn _ => Top.Eval CAST )
         | REDUCTION                 ( fn _ => Top.EvalRed REDUCTION )
         | CMD                       ( CMD ) 
         | NUMCMD                    ( NUMCMD )
         | DEQS                      ( fn _ => DEQS )

  DEQS   : APPLN DEQ CAST
            ( case APPLN
                of (Ref_c ID) => Top.EvalCxt [(Let,Def,UnfGlb,[],[ID],CAST)]
                  | _         => defnerror() )
         | APPLN CTXTT DEQ CAST
            ( case APPLN
                of (Ref_c ID) =>
                      Top.EvalCxt [(Let,Def,UnfGlb,[],[ID],Ctxt_c (CTXTT,CAST))]
                 | _         => defnerror() )
         | APPLN COLON APPLN DEQ CAST
            ( case APPLN
                of (Ref_c ID) =>
                     Top.EvalCxt [(Let,Def,UnfGlb,[],[ID],Cast_c (CAST,APPLN2))]
                 | _         => defnerror() )
         | APPLN CTXTT COLON APPLN DEQ CAST
	    ( case APPLN
                of (Ref_c ID) => Top.EvalCxt [(Let,Def,UnfGlb,[],[ID],
 	                             Ctxt_c (CTXTT,Cast_c (CAST,APPLN2)))]
		 | _         => defnerror() )

 
  CMD : ECHO STRING                  ( fn _ => message ("-- "^STRING^" --") )
      | LINE                         ( line )

      | MAKE STRINGorID              ( fn _ => Modules.Make true STRINGorID )
      | LOAD STRINGorID              ( fn _ => Modules.Load STRINGorID )
      | RELOAD STRINGorID
	  ( fn _ => Modules.ReloadFrom STRINGorID STRINGorID )
      | RELOAD STRINGorID FROM STRINGorID
          ( fn _ => Modules.ReloadFrom STRINGorID1 STRINGorID2 )
      | CUT CUTCXT            ( fn _ => Discharge.Cut CUTCXT )

      | EXPORTST STRINGorID   ( fn _ => (exportML STRINGorID; ()) )

      | DISCHARGE ID          ( fn _ => Namespace.Discharge ID )
      | DISCHARGEKEEP ID      ( fn _ => Namespace.DischargeKeep ID )
      | STTHEORY ID           ( fn _ => Namespace.StartTheory ID )
      | ENDTHEORY ID          ( fn _ => Namespace.EndTheory ID )
      
      | INTROS INTROST        ( fn _ => Toplevel.Intros (~9999) true INTROST )
      | INTROS RELGOAL INTROST
         ( fn _ => Toplevel.Intros (RELGOAL ()) true INTROST ) 
      | iNTROS INTROST        ( fn _ => Toplevel.Intros (~9999) false INTROST )
      | iNTROS RELGOAL INTROST
         ( fn _ => Toplevel.Intros (RELGOAL ()) false INTROST )
      | PBP INT INTLIST		(fn _ => Pbp.pbptop INT INTLIST)
      | PBPHYP ID INTLIST	(fn _ => Pbp.pbphyptop ID INTLIST)
      | REFINE CAST                  ( fn _ => Toplevel.Refine (~9999) 0 CAST )
      | REFINE RELGOAL CAST          ( fn _ => Toplevel.Refine (RELGOAL ()) 0 CAST )
      | REFINE CAST ELIM INT         ( fn _ => Toplevel.Refine (~9999) INT CAST ) 
      | REFINE RELGOAL CAST ELIM INT ( fn _ => Toplevel.Refine (RELGOAL ()) INT CAST )
      | QREPL CAST  		     ( fn _ => Tactics.replace (~9999) CAST )
      | QREPL RELGOAL CAST           ( fn _ => Tactics.replace (RELGOAL ()) CAST )
      | EQUIV CAST                   ( fn _ => Top.Equiv CAST )
      | EQUIV VREG CAST              ( fn _ => Top.V_Equiv CAST )
      | EQUIV TREG CAST              ( fn _ => Top.T_Equiv CAST )
      | CLAIM CAST                   ( fn _ => Toplevel.Claim CAST )
      | QNIFY                  ( fn _ => ConorTop.Qnify true (~1) Prop_c)
      | QNIFY INT              ( fn _ => ConorTop.Qnify true INT Prop_c)
      | QNIFY CAST             ( fn _ => ConorTop.Qnify true 0 CAST)
      | qNIFY                  ( fn _ => ConorTop.Qnify false (~1) Prop_c)
      | qNIFY INT              ( fn _ => ConorTop.Qnify false INT Prop_c)
      | qNIFY CAST             ( fn _ => ConorTop.Qnify false 0 CAST)
      | INVERT CAST            ( fn _ => ConorTop.Invert (~9999) CAST)
      | INVERT RELGOAL CAST    ( fn _ => ConorTop.Invert (RELGOAL ()) CAST)
      | UTAC ID                ( fn _ => Tactics.ExecUserTac ID )
      | INDUCTION CAST         ( fn _ => ConorTop.Induction CAST 0 )
      | INDUCTION INT          ( fn _ => ConorTop.Induction Prop_c INT )
      | CONFIG EQUALITY ID ID ID      ( fn _ => ConorTop.ConfigEquality
                                                (ID1,ID2,ID3) )
      | CONFIG QNIFY ID ID      ( fn _ => ConorTop.ConfigQnify (ID1,ID2,"") )
      | CONFIG THEOREMS         ( fn _ => ConorTop.ConfigTheorems ("","","") )
      | CONFIG THEOREMS ID ID ID ( fn _ => ConorTop.ConfigTheorems
                                           (ID1,ID2,ID3) )
      | CONFIG QREPL                 ( fn _ => Tactics.Config_Qrepl ("","","") )
      | CONFIG QREPL ID ID ID        ( fn _ => Tactics.Config_Qrepl
                                                (ID1,ID2,ID3) )
      | CONFIG SAVEUNFROZ            ( fn _ => Toplevel.Save_frz_default:= UnFroz )
      | CONFIG SAVEFROZEN            ( fn _ => Toplevel.Save_frz_default:= Froz )
      | GOAL APPLN                   ( fn _ => Toplevel.Goal APPLN ("",Global) )
      | GOAL ID COLON APPLN          ( fn _ => Toplevel.Goal APPLN (ID,Global) )
      | DOLLARGOAL APPLN             ( fn _ => Toplevel.Goal APPLN ("",Local) )
      | DOLLARGOAL ID COLON APPLN    ( fn _ => Toplevel.Goal APPLN (ID,Local) )
      | EXPAND INTLIST IDLST         ( fn _ => Top.Expand INTLIST IDLST )
      | EXPAND INTLIST VREG IDLST    ( fn _ => Top.V_Expand INTLIST IDLST )
      | EXPAND INTLIST TREG IDLST    ( fn _ => Top.T_Expand INTLIST IDLST )
      | EXPALL INTLIST RELGOAL       ( fn _ => Top.ExpAll INTLIST (RELGOAL ()) )
      | EXPALL INTLIST VREG INT      ( fn _ => Top.V_ExpAll INTLIST INT )
      | EXPALL INTLIST TREG INT      ( fn _ => Top.T_ExpAll INTLIST INT )
      | HNF INT                      ( fn _ => Top.Hnf INT )
      | HNF                          ( fn _ => Top.Hnf 1 )
      | HNF INT VREG                 ( fn _ => Top.V_Hnf INT )
      | HNF VREG                     ( fn _ => Top.V_Hnf 1 )
      | HNF INT TREG                 ( fn _ => Top.T_Hnf 1 )
      | HNF TREG                     ( fn _ => Top.T_Hnf 1 )
      | DNF                          ( fn _ => Top.Dnf() )
      | DNF VREG                     ( fn _ => Top.V_Dnf() )
      | DNF TREG                     ( fn _ => Top.T_Dnf() )
      | INCLUDE STRINGorID           ( fn _ => Modules.Include STRINGorID )
      | INTERACTIVE                  ( fn _ => Interactive() )
      | NORMAL                       ( fn _ => Top.Normal () )
      | NORMAL VREG                  ( fn _ => Top.V_Normal () )
      | NORMAL TREG                  ( fn _ => Top.T_Normal () )
      | NEXT RELGOAL                 ( fn _ => Toplevel.Next (RELGOAL ()) )
      | SAVE ID
           ( fn _ => Namespace.Save ID (!Toplevel.Save_frz_default,Global) )
      | DOLLARSAVE ID
           ( fn _ => Namespace.Save ID (!Toplevel.Save_frz_default,Local) )
      | SAVE
           ( fn _ => Namespace.Save "" (!Toplevel.Save_frz_default,Global) )
      | DOLLARSAVE
           ( fn _ => Namespace.Save "" (!Toplevel.Save_frz_default,Local) )
      | SAVEUNFROZ ID         ( fn _ => Namespace.Save ID UnfGlb )
      | SAVEFROZEN ID         ( fn _ => Namespace.Save ID FrzGlb )
      | SAVEUNFROZ            ( fn _ => Namespace.Save "" UnfGlb )
      | SAVEFROZEN            ( fn _ => Namespace.Save "" FrzGlb )

      | ASSUMPTION RELGOAL    ( fn _ => Tactics.Assumption (RELGOAL()) )
      | ASSUMPTION            ( fn _ => Tactics.Assumption (~9999) )

      | IMMED                        ( fn _ => Tactics.Immed [] )
      | FREEZE IDLST                 ( fn _ => (Namespace.Freeze IDLST;()) )
      | UNFREEZE IDLST               ( fn _ => (Namespace.Unfreeze IDLST;()) )
      | STARTTIMER                   ( fn _ => Top.StartTimer() )
      | PRINTTIMER                   ( fn _ => Top.PrintTimer() )
      | INIT ID                      ( fn _ => Init.Init_raw ID )
      | CTXT                         ( fn _ => Namespace.prt_context_dpth 999999 ElideDfns )
      | CTXT INT                     ( fn _ => Namespace.prt_context_dpth INT ElideDfns )
      | CTXT ID			     ( fn _ => Namespace.prt_context_nam ID ElideDfns )
      | DECLS                 ( fn _ => Namespace.prt_context_dpth 999999 OmitDfns )
      | DECLS INT                    ( fn _ => Namespace.prt_context_dpth INT OmitDfns )
      | DECLS ID                     ( fn _ => Namespace.prt_context_nam ID OmitDfns )
      | MARKS                        ( fn _ => Namespace.prt_context_dpth 999999 Marks )
      | FORGET ID                    ( fn _ => Namespace.Forget ID )
      | FORGETMARK ID                ( fn _ => Namespace.ForgetMrk ID )
      | PRF                          ( Toplevel.PR )
      | UNDO INT                     ( fn _ => Toplevel.UNDO INT )
      | KILLREF                      ( Toplevel.KillRef )
      | LABEL TAGBEGIN LABELTAG TAGEND ID    ( fn _ =>
                                       Quartermaster.Label LABELTAG ID )
      | LABEL TAGBEGIN LABELTAG TAGEND       ( fn _ =>
                                       Quartermaster.Label LABELTAG "" )
      | GENERATE TAGBEGIN LABELTAG TAGEND DEFN ( fn _ =>
                                       Quartermaster.Generate LABELTAG DEFN )
      | GENERATE TAGBEGIN LABELTAG TAGEND    ( fn _ =>
                                       Quartermaster.Generate LABELTAG
                                       (Let,VBot,UnfGlb,[],[],Prop_c) )
      | CONFIG PPOFF                 ( fn _ => Pretty.SetPrettyPrinting false )
      | CONFIG PPON                  ( fn _ => Pretty.SetPrettyPrinting true )
      | CONFIG ANNOTATEON            ( fn _ => SetAnnotating true)
      | CONFIG ANNOTATEOFF            ( fn _ => SetAnnotating false)
      | CONFIG PPLINEWIDTH INT	     ( fn _ => SetLineWidth INT )
      | CONFIG SAVEOBJECTSON         ( fn _ => (
				 	   Modules.SetSaveObjects true;
				           Namespace.addConfig 
                                             ("Objects","","","") ) )

      | CONFIG SAVEOBJECTSOFF         ( fn _ => (
				 	   Modules.SetSaveObjects false;
				           Namespace.addConfig 
                                             ("NoObjects","","","") ) )

      | CONFIG INFIX INFIX_UNREGD  
           (fn _ => (if Infix.infix_register INFIX_UNREGD Infix.NAssoc 0 then
                        (Namespace.addConfig("Infix",INFIX_UNREGD, "",""))
                     else ()))
      | CONFIG INFIX INFIX_UNREGD ASSOC INT
           (fn _ => (if Infix.infix_register INFIX_UNREGD ASSOC INT then
                     (Namespace.addConfig("Infix",INFIX_UNREGD, 
                                   Infix.strAssoc ASSOC, Infix.strPri INT))
                     else ()))

      | PWD                      ( fn _ => message(System.Directory.getWD()) )
      | CD STRING                    (fn _ => 
                   (System.Directory.cd STRING
	             handle NotDirectory =>
	               message("Error: cannot find directory "^STRING);
                    message(System.Directory.getWD()
	              handle NotDirectory => STRING)) )
      | LOGIC                        (fn _ => 
                  case theory()
		    of lf     => message"No impredicative logic for LF"
		     | xtndCC =>
	                  (Namespace.killRef(); (!Modules.legoStringParser) logicPreludeXCC)
		     | pureCC =>
                          (Namespace.killRef(); (!Modules.legoStringParser) logicPreludePCC) )
      | HELP                         ( fn _ => help() )
      | INDUCTIVE CTXTL INDOPT
          ( fn _ => Top.inductive_datatype CTXTL INDOPT)
      | RECORD CTXTL RECOPT 
          ( fn _ => Top.record_type CTXTL RECOPT)

SHAREDOPT :                     ( Top.inductive_no_switches )
        | INDOPT PARAMS CTXTL   ( Top.inductive_update_params CTXTL INDOPT )
        | INDOPT TYPESTR CNSTR  ( Top.inductive_update_universe CNSTR INDOPT )
        | INDOPT NOREDS         ( Top.inductive_update_noreds INDOPT )
        | INDOPT DOUBLE         ( Top.inductive_update_double INDOPT )
        | INDOPT UNSAFE         ( Top.inductive_update_unsafe INDOPT )
        | INDOPT THEOREMS       ( Top.inductive_update_theorems INDOPT )
        | INDOPT RELATION       ( Top.inductive_update_relation INDOPT )


INDOPT  : SHAREDOPT             ( SHAREDOPT )
        | INDOPT CONSTRS CTXTLE ( Top.inductive_update_constructors CTXTLE INDOPT )
        | INDOPT INVERSION      ( Top.inductive_update_inversion INDOPT )

        
RECOPT  : SHAREDOPT            ( SHAREDOPT )
        | RECOPT FIELDS CTXTLE
	                ( Top.inductive_update_constructors CTXTLE RECOPT )

  NUMCMD : NUMCMD0 RELGOAL           ( fn _ => NUMCMD0 (RELGOAL ()) )
         | NUMCMD0                   ( fn _ => NUMCMD0 (~9999) )
         | NUMCMD1 RELGOAL CAST      ( fn _ => NUMCMD1 (RELGOAL ()) CAST )
         | NUMCMD1 CAST              ( fn _ => NUMCMD1 (~9999) CAST )
        
  NUMCMD0 : ANDI                     ( Tactics.AndIntro )
          | ORIL                     ( Tactics.OrIntroL )
          | ORIR                     ( Tactics.OrIntroR )
          | NOTI                     ( Tactics.NotIntro )
          | IMPI                     ( Tactics.AllIntro )
          | ALLI                     ( Tactics.AllIntro )
        
  NUMCMD1 : ANDE                     ( Tactics.AndElim )
          | ORE                      ( Tactics.OrElim )
          | NOTE                     ( Tactics.NotElim )
          | EXE                      ( Tactics.ExElim )
          | IMPE                     ( Tactics.AllElim )
          | ALLE                     ( Tactics.AllElim )
          | EXI                      ( Tactics.ExIntro )
        

  CTXTTE :                            ( [] )
         | CTXTT                      ( CTXTT )
  CTXTT : BIND CTXTTE                 ( BIND::CTXTTE )

  CTXTLE:                            ( [] )
        | CTXTL                      ( CTXTL )
  CTXTL : DECL CTXTLE                ( DECL::CTXTLE )


       
  BIND : DECL                        ( DECL ) 
       | DEFN                        ( DEFN )
        
  DECL : LSQBR DLSLBIND RSQBR        ( let val ((x,y,z),w) = DLSLBIND 
                                        in (Lda,x,UnfLoc,w,y,z) end )
       | DOLLARSQ DLSLBIND RSQBR     ( let val ((x,y,z),w) = DLSLBIND
                                        in (Lda,x,UnfGlb,w,y,z) end )
       | LCBR DLSLBIND RCBR          ( let val ((x,y,z),w) = DLSLBIND
                                        in (Pi,x,UnfLoc,w,y,z) end )
       | LPTBR DLSLBIND RPTBR        ( let val ((x,y,z),w) = DLSLBIND
                                        in (Sig,x,UnfLoc,w,y,z) end )
        
  DEFN : LSQBR DNSLBIND RSQBR          ( let val ((x,y,z),w) = DNSLBIND 
                                        in (Let,x,UnfGlb,w,y,z) end )
       | DOLLARSQ DNSLBIND RSQBR       ( let val ((x,y,z),w) = DNSLBIND 
                                        in (Let,x,UnfLoc,w,y,z) end )
       | STARSQ DNSLBIND RSQBR         ( let val ((x,y,z),w) = DNSLBIND 
                                        in (Let,x,FrzGlb,w,y,z) end )


CUTCXT  : CUTDFN                     ( [CUTDFN] )
        | CUTDFN CUTCXT              ( CUTDFN::CUTCXT )
CUTDFN : LSQBR ID EQUAL CAST RSQBR   ( (ID,CAST) )

REDUCTION : LSQBR CTXTT REDS RSQBR   ( Red_c(CTXTT,REDS) )
          | LSQBR CHOICE REDS RSQBR         ( Red_c([],REDS) )
REDS      : RED                      ( [RED] )
          | RED CHOICE REDS          ( RED::REDS )
RED       : PAT CONTRACT APPLN       ( (PAT,APPLN) )

CASEEXP  : CASE APPLN BRANCHES ENDCASE         ( Case_c(APPLN,BRANCHES) )
BRANCHES : BRANCH                              ( [BRANCH] )
         | BRANCH BRANCHES                     ( BRANCH::BRANCHES )
BRANCH   : CHOICE CTXTT SPAT CONTRACT APPLN    ( (CTXTT,SPAT,APPLN) )
         | CHOICE SPAT CONTRACT APPLN          ( ([],SPAT,APPLN) )

  CAST : APPLN                       ( APPLN ) 
       | APPLN COLON APPLN           ( Cast_c (APPLN1,APPLN2) )
        
  APPLN : CNSTR                                (CNSTR)
        | APPLN CNSTR         %prec app        (App_c (ShowNorm,APPLN,CNSTR))  
        | APPLN BAR CNSTR                      (App_c (ShowForce,APPLN,CNSTR)) 
        | APPLN PCTPCT CNSTR                   (App_c (NoShow,APPLN,CNSTR))    
        | APPLN INFIX_L1 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_L1),APPLN1),APPLN2))
        | APPLN INFIX_L2 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_L2),APPLN1),APPLN2))
        | APPLN INFIX_L3 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_L3),APPLN1),APPLN2))
        | APPLN INFIX_L4 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_L4),APPLN1),APPLN2))
        | APPLN INFIX_L5 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_L5),APPLN1),APPLN2))
        | APPLN INFIX_L6 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_L6),APPLN1),APPLN2))
        | APPLN INFIX_L7 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_L7),APPLN1),APPLN2))
        | APPLN INFIX_L8 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_L8),APPLN1),APPLN2))
        | APPLN INFIX_L9 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_L9),APPLN1),APPLN2))
        | APPLN INFIX_R1 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_R1),APPLN1),APPLN2))
        | APPLN INFIX_R2 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_R2),APPLN1),APPLN2))
        | APPLN INFIX_R3 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_R3),APPLN1),APPLN2))
        | APPLN INFIX_R4 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_R4),APPLN1),APPLN2))
        | APPLN INFIX_R5 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_R5),APPLN1),APPLN2))
        | APPLN INFIX_R6 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_R6),APPLN1),APPLN2))
        | APPLN INFIX_R7 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_R7),APPLN1),APPLN2))
        | APPLN INFIX_R8 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_R8),APPLN1),APPLN2))
        | APPLN INFIX_R9 APPLN       ( App_c (ShowNorm,
             App_c (ShowNorm,Ref_c (Infix.infix_name INFIX_R9),APPLN1),APPLN2))
        
  CNSTR : SORT                       ( SORT )
        | ID                         ( Ref_c ID )
        | CNSTR ARROW APPLN 
            (Bind_c ((Pi,Vis,(UnFroz,Local),[],[""],CNSTR),APPLN))
					    (** use Bot_LG instead of Local **)
        | CNSTR HASH APPLN 
            (Bind_c ((Sig,Vis,(UnFroz,Local),[],[""],CNSTR),APPLN))
        | CNSTR BACKSLASH APPLN
            (Bind_c ((Lda,Vis,(UnFroz,Local),[],[""],CNSTR),APPLN))
        | BIND APPLN                 ( Bind_c (BIND,APPLN) )
	| TUPLE			     ( Tuple_c TUPLE )
        | CNSTR DOT1                 ( Proj_c (Fst,CNSTR) )
        | CNSTR DOT2                 ( Proj_c (Snd,CNSTR) )
        | CNSTR DOT CNSTR            ( App_c (ShowNorm,CNSTR2,CNSTR1) )  
        | CNSTR UPARR ID             ( Proj_c (Labl ID,CNSTR) )  
        | LRBR CAST RRBR             ( CAST ) 
        | LRBR NORMAL CAST RRBR      ( Normal_c CAST ) 
        | LRBR NORMTYP CAST RRBR     ( RedTyp_c(iNrml,CAST) ) 
        | LRBR HNF INT CAST RRBR     ( Hnf_c (INT,CAST) ) 
        | LRBR HNF CAST RRBR         ( Hnf_c (1,CAST) ) 
        | LRBR DNF CAST RRBR         ( Dnf_c CAST ) 
        | LRBR TYPEOF CAST RRBR      ( TypeOf_c CAST )
	| LRBR GEN ID CAST RRBR      ( Gen_c (CAST,ID) )
        | QM                         ( NewVar_c )
        | QM RELGOAL                 ( Var_c (RELGOAL()) )
        | CASEEXP                    ( CASEEXP )
        | TILDE CNSTR                ( App_c (ShowNorm,Ref_c "not",CNSTR) )
        | TAGBEGIN MAGICTAG TAGEND   ( Quartermaster.Make MAGICTAG )

(* simple patterns for `Case' LHS *)
SPAT : ID                            ( Ref_c ID )
     | SPAT ID                       ( App_c (ShowNorm,SPAT,Ref_c ID) )
     | SPAT BAR ID                   ( App_c (ShowForce,SPAT,Ref_c ID) )
     | SPAT SORT                     ( App_c (ShowNorm,SPAT,SORT) )
     | SPAT BAR SORT                 ( App_c (ShowForce,SPAT,SORT) )
(* patterns for reduction LHS *)
(*PPAT : SPAT                          ( SPAT )                       *)
(*     | LRBR PAT RRBR                 ( PAT )                        *)
(*PAT  : PPAT                          ( PPAT )                       *)
(*     | PAT PPAT                      ( App_c (ShowNorm,PAT,PPAT) )  *)
(*     | PAT BAR PPAT                  ( App_c (ShowForce,PAT,PPAT) ) *)
PPAT : ID                            ( Ref_c ID )
     | LRBR PAT RRBR                 ( PAT )
PAT  : PPAT                          ( PPAT )
     | PAT PPAT                      ( App_c (ShowNorm,PAT,PPAT) )
     | PAT BAR PPAT                  ( App_c (ShowForce,PAT,PPAT) )
     | PAT SORT                      ( App_c (ShowNorm,PAT,SORT) )
     | PAT BAR SORT                  ( App_c (ShowForce,PAT,SORT) )

SORT    : PROP                       ( Prop_c )
        | THRY                       ( Theory_c )
        | TYPE
           ( case theory()
               of lf => Prop_c
                | pureCC => failwith"'Type' not in the language of PCC"
                | _  => Type_c "" )
        | TYPE LRBR APPLN RRBR
           ( case theory()
               of lf => failwith"'Type(.)' not in the language of LF"
                | pureCC => failwith"'Type' not in the language of PCC"
	        | _ => (case APPLN of
		          (Ref_c ID) => Type_c ID
			 | _ => raise Error.error
			 (Error.TYPEAPPLN,NONE,[(fst o fEval) APPLN])
                        ))
        | TYPE LRBR INT RRBR
           ( case theory()
               of lf => failwith"'Type(.)' not in the language of LF"
                | pureCC => failwith"'Type' not in the language of PCC"
	        | _ => TypeAbs_c INT )


TUPLE	: LRBR TPL_BOD COLON APPLN RRBR	( (TPL_BOD,APPLN) )
	| LRBR TPL_BOD RRBR		( (TPL_BOD,Bot_c) )
TPL_BOD	: APPLN COMMA APPLN		( [APPLN1,APPLN2] )
	| APPLN COMMA TPL_BOD		( APPLN::TPL_BOD )
        
DLBIND   : IDLIST COLON APPLN           ( (Vis,IDLIST,APPLN) )
         | IDLIST BAR APPLN             ( (Hid,IDLIST,APPLN) )
         | IDLIST QM APPLN              ( (VBot,IDLIST,APPLN) )
DLSLBIND : DLBIND                       ( (DLBIND,[]) )
         | DLBIND SLASHS IDLST          ( (DLBIND,IDLST) )
        
DNBIND   : IDLIST EQUAL CAST            ( (Def,IDLIST,CAST) )
         | IDLIST CTXTT EQUAL CAST      ( (Def,IDLIST,Ctxt_c(CTXTT,CAST)) )
         | IDLIST COLON APPLN EQUAL CAST
                                        ( (Def,IDLIST,Cast_c(CAST,APPLN)) )
         | IDLIST CTXTT COLON APPLN EQUAL CAST
                                        ( (Def,IDLIST,
                                           Ctxt_c(CTXTT,Cast_c(CAST,APPLN))) )
DNSLBIND : DNBIND                       ( (DNBIND,[]) )
         | DNBIND SLASHS IDLST          ( (DNBIND,IDLST) )
        
  IDLIST : ANONID                    ( [ANONID] )
         | IDLIST COMMA ANONID       ( IDLIST @ [ANONID] )
        
INTLIST : 			     ([])
	| INTLIST INT		     (INTLIST @ [INT])

  ANONID : ID                        ( ID ) 
         | UNDERSCORE                ( "" )


        
  INTROST : ANONID                   ( [ANONID] )
          | HASH                     ( ["#"] )
          | INTROST ANONID           ( INTROST @ [ANONID] )
          | INTROST HASH             ( INTROST @ ["#"] )
	  |                          ( [] )
        
  IDLST :                            ( [] )
        | IDLST ID                   ( IDLST @ [ID] )

  RELGOAL : INT                      ( fn _ => INT )
          | RELINT                   ( fn _ => fst (Synt.goal_rel RELINT) )

STRINGorID : ID                      ( ID )
           | STRING                  ( STRING )

SorI_LST : SorI_LST STRINGorID       ( SorI_LST @ [STRINGorID] )
         |                           ( [] )

LABELTAG : LABELTAG INT              ( LABELTAG @ [string_of_num INT] )
         | LABELTAG STRINGorID       ( LABELTAG @ [STRINGorID] )
         |                           ( [] )

MAGICTAG : MAGICTAG CNSTR            ( MAGICTAG @ [CNSTR] )
         | MAGICTAG INT              ( MAGICTAG @ [Ref_c (string_of_num INT)] )
         | MAGICTAG STRING           ( MAGICTAG @ [Ref_c STRING] )
         |                           ( [] )

ASSOC: LEFT                  (Infix.LAssoc)
     | RIGHT                 (Infix.RAssoc)